# options for analysis running
run:
  tests: true
  silent: true
  skip-dirs:
    - generated
  skip-files:
    - ".*\\.pb\\.go"
    - ".*_test\\.go"

# output configuration options
output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true

# all available settings of specific linters
linters-settings:
  errcheck:
    check-type-assertions: true
    check-blank: true
  govet:
    check-shadowing: false
    disable:
      - shadow
  gofmt:
    simplify: true
  goconst:
    min-len: 3
    min-occurrences: 3
  misspell:
    locale: UK
  unused:
    check-exported: true
  unparam:
    algo: cha
  nakedret:
    max-func-lines: 30
  prealloc:
    simple: true
    range-loops: true
    for-loops: true

linters:
  enable:
    - revive # Revive replaces golint
    - misspell # Finds commonly misspelled English words in comments [fast: true]
    - nakedret # Finds naked returns in functions greater than a specified function length [fast: true]
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases [fast: false]
    - gas # Inspects source code for security problems [fast: false]
    - unconvert # Remove unnecessary type conversions [fast: false]
    - unparam # Reports unused function parameters [fast: false]
    - goimports # Goimports does everything that gofmt does. Additionally it checks unused imports [fast: true]
    - megacheck # 3 sub-linters in one: unused, gosimple and staticcheck [fast: false]
    - staticcheck # (megacheck) Staticcheck is a go vet on steroids, applying a ton of static analysis checks [fast: false]

  disable:
    - golint # Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes [fast: true]
    - prealloc # Finds slice declarations that could potentially be preallocated [fast: true]
    - unused # (megacheck) Checks Go code for unused constants, variables, functions and types [fast: false]
    - gosimple # (megacheck) Linter for Go source code that specializes in simplifying a code [fast: false]
    - gofmt # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification [fast: true]
    - dupl # Tool for code clone detection [fast: true]
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code [fast: false]
    - depguard # Go linter that checks if package imports are in a list of acceptable packages [fast: false]
    - varcheck # Finds unused global variables and constants [fast: false]
    - deadcode # Finds unused code [fast: false]
    - goconst # Finds repeated strings that could be replaced by a constant [fast: true]
    - gocyclo # Computes and checks the cyclomatic complexity of functions [fast: true]
    - maligned # Tool to detect Go structs that would take less memory if their fields were sorted [fast: false]
    - lll # Reports long lines [fast: true]
    - structcheck # Finds an unused struct fields [fast: false]
    - gosec